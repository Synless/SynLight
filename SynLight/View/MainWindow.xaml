<Window
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/mix/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" mc:Ignorable="d" x:Class="SynLight.View.MainWindow"
    xmlns:local="clr-namespace:SynLight.ViewModel"
    xmlns:conv="clr-namespace:SynLight.Converter"
    xmlns:System="clr-namespace:System;assembly=mscorlib"
    xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
    Title="{Binding SynLight.Tittle, UpdateSourceTrigger=PropertyChanged}"
    Width="400" Height="510"
    MinHeight="500" MinWidth="360"
    Icon="/SynLight;component/Images/SY.ico"
    Name="SynLightForm" BorderBrush="Black"
    WindowStartupLocation="CenterScreen">
    <Window.DataContext>
        <local:MainViewModel/>
    </Window.DataContext>
    <!--<Window.Background>
        <ImageBrush ImageSource="/SynLight;component/Images/background.png"/>
    </Window.Background>-->
    <Window.Resources>
        <conv:BoolToPlayPause x:Key="b2pp"/>
        <conv:Not x:Key="Not"/>
        <conv:BoolToVisib x:Key="b2v"/>
        <conv:PurcentInvert x:Key="purcentInv"/>

        <System:Double  x:Key="ToggleSwitchCarageWidth">30</System:Double>
        <System:Double  x:Key="ToggleSwitchWidth">60</System:Double>
        <System:Double  x:Key="ToggleSwitchHeight">20</System:Double>
        <System:Double  x:Key="ToggleSwitchBigCarageWidth">90</System:Double>
        <System:Double  x:Key="ToggleSwitchBigWidth">180</System:Double>
        <System:Double  x:Key="ToggleSwitcBighHeight">60</System:Double>
        <Thickness      x:Key="ToggleSwitchBorderThickness">1</Thickness>
        <CornerRadius   x:Key="ToggleSwitchCornerRadius">0</CornerRadius>
        <LinearGradientBrush x:Key="CheckedBlue" StartPoint="0,0" EndPoint="0,1">
            <GradientStop Color="#FF285AB3" Offset="0"/>
            <GradientStop Color="#FF285AB3" Offset="1"/>
        </LinearGradientBrush>
        <LinearGradientBrush x:Key="CheckedGreen" StartPoint="0,0" EndPoint="0,1">
            <!--<GradientStop Color="#BB08633A" Offset="0"/>
            <GradientStop Color="#BB0D823F" Offset="1"/>-->
            <GradientStop Color="#BB08633A" Offset="0"/>
            <GradientStop Color="#BB08633A" Offset="1"/>
        </LinearGradientBrush>
        <LinearGradientBrush x:Key="CheckedRed" StartPoint="0,0" EndPoint="0,1">
            <GradientStop Color="#FFBD384A" Offset="0"/>
            <GradientStop Color="#FFB4384A" Offset="1"/>
        </LinearGradientBrush>
        <LinearGradientBrush x:Key="CheckedGrey" StartPoint="0,0" EndPoint="0,1">
            <GradientStop Color="#FFE5E5E5" Offset="0"/>
            <GradientStop Color="#FFFEFEFE" Offset="1"/>
        </LinearGradientBrush>
        <LinearGradientBrush x:Key="CheckedOrange" StartPoint="0,0" EndPoint="0,1">
            <GradientStop Color="#FFCA6A13" Offset="0"/>
            <GradientStop Color="#FFF67D0C" Offset="0.2"/>
            <GradientStop Color="#FFFE7F0C" Offset="0.2"/>
            <GradientStop Color="#FFFA8E12" Offset="0.5"/>
            <GradientStop Color="#FFFF981D" Offset="0.5"/>
            <GradientStop Color="#FFFCBC5A" Offset="1"/>
        </LinearGradientBrush>
        <LinearGradientBrush x:Key="BackGroundBorder" StartPoint="0,0" EndPoint="0,1">
            <GradientStop Color="#FFBDBDBD" Offset="0"/>
            <GradientStop Color="#FFE7E7E7" Offset="0.1"/>
            <GradientStop Color="#FFF3F3F3" Offset="0.5"/>
            <GradientStop Color="#FFFCFCFC" Offset="0.5"/>
            <GradientStop Color="#FFFEFEFE" Offset="1"/>
        </LinearGradientBrush>
        <LinearGradientBrush x:Key="Carage" EndPoint="0,1" StartPoint="0,0">
            <GradientStop Color="#FFF0F0F0" Offset="0"/>
            <GradientStop Color="#FFFBFBFB" Offset="1"/>
        </LinearGradientBrush>
        <SolidColorBrush x:Key="RegularBorder" Color="#FF737373"/>
        <SolidColorBrush x:Key="DarkerBorder" Color="#FF535353"/>
        <SolidColorBrush x:Key="CheckedOrangeBorder" Color="#BB8E4A1B"/>
        <SolidColorBrush x:Key="CheckedRedBorder" Color="#BB743814"/>
        <SolidColorBrush x:Key="CheckedGreenBorder" Color="#BB147438"/>
        <SolidColorBrush x:Key="CheckedBlueBorder" Color="#BB143874"/>
        <SolidColorBrush x:Key="EasyGrey" Color="#DDFFFFFF"/>
        <ControlTemplate x:Key="TextBoxBaseControlTemplate" TargetType="{x:Type TextBoxBase}">
            <Border Background="{TemplateBinding Background}" 
                x:Name="Bd" CornerRadius="{StaticResource ToggleSwitchCornerRadius}" BorderThickness="1" BorderBrush="{StaticResource RegularBorder}">
                <ScrollViewer x:Name="PART_ContentHost"/>
            </Border>
            <ControlTemplate.Triggers>
                <Trigger Property="IsEnabled" Value="True">
                    <Setter Property="Background" Value="{StaticResource CheckedGrey}" TargetName="Bd"/>
                    <Setter Property="Foreground" Value="Black"/>
                </Trigger>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Background" Value="#FFB1C2D3" TargetName="Bd"/>
                    <Setter Property="Foreground" Value="Black"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <Style x:Key="ButtonRoundCorner" TargetType="{x:Type Button}">
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Grid x:Name="grid">
                            <Border x:Name="border" CornerRadius="3" BorderBrush="{StaticResource DarkerBorder}" BorderThickness="1" Background="{StaticResource Carage}">
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" TextElement.FontWeight="Bold">
                                </ContentPresenter>
                            </Border>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ToggleSwitchPlayPause" TargetType="CheckBox">
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
            <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type CheckBox}">
                        <ControlTemplate.Resources>
                            <Storyboard x:Key="OnChecking">
                                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="slider" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)">
                                    <SplineDoubleKeyFrame KeyTime="00:00:00.0500000" Value="0"/>
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                            <Storyboard x:Key="OnUnchecking">
                                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="slider" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)">
                                    <SplineDoubleKeyFrame KeyTime="00:00:00.0500000" Value="{StaticResource ToggleSwitchBigCarageWidth}"/>
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                        </ControlTemplate.Resources>
                        <DockPanel x:Name="dockPanel" Width="{StaticResource ToggleSwitchBigWidth}">
                            <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" ContentTemplate="{TemplateBinding ContentTemplate}" RecognizesAccessKey="True" VerticalAlignment="Center"/>
                            <Grid>
                                <Border x:Name="BackgroundBorder" Background="{StaticResource CheckedGreen}" BorderBrush="{StaticResource CheckedGreenBorder}" BorderThickness="{StaticResource ToggleSwitchBorderThickness}" CornerRadius="{StaticResource ToggleSwitchCornerRadius}" Height="{StaticResource ToggleSwitcBighHeight}" Width="{StaticResource ToggleSwitchBigWidth}">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition/>
                                            <ColumnDefinition/>
                                        </Grid.ColumnDefinitions>
                                        <TextBlock Margin="0,0,0,0.4"   Padding="0,0,0,4"  x:Name="Off" HorizontalAlignment="Center" Grid.Column="1" VerticalAlignment="Center" Text="▌▌" FontSize="20" FontWeight="DemiBold" Foreground="White"/>
                                        <TextBlock Margin="0,0,0.8,0.5" x:Name="On"  HorizontalAlignment="Center" Grid.Column="0" VerticalAlignment="Center" Text="▶" FontSize="25" FontWeight="DemiBold" Foreground="White"/>
                                    </Grid>
                                </Border>
                                <Border HorizontalAlignment="Left" BorderBrush="{StaticResource RegularBorder}" x:Name="slider" Width="{StaticResource ToggleSwitchBigCarageWidth}" Height="{StaticResource ToggleSwitcBighHeight}" BorderThickness="{StaticResource ToggleSwitchBorderThickness}" CornerRadius="{StaticResource ToggleSwitchCornerRadius}" RenderTransformOrigin="0.5,0.5" Margin="0">
                                    <Border.RenderTransform>
                                        <TransformGroup>
                                            <ScaleTransform ScaleX="1" ScaleY="1"/>
                                            <SkewTransform AngleX="0" AngleY="0"/>
                                            <RotateTransform Angle="0"/>
                                            <TranslateTransform X="0" Y="0"/>
                                        </TransformGroup>
                                    </Border.RenderTransform>
                                    <Border Background="{StaticResource Carage}"/>
                                </Border>
                            </Grid>
                        </DockPanel>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="True">
                                <Trigger.ExitActions>
                                    <BeginStoryboard Storyboard="{StaticResource OnUnchecking}" x:Name="OnUnchecking_BeginStoryboard"/>
                                </Trigger.ExitActions>
                                <Trigger.EnterActions>
                                    <BeginStoryboard Storyboard="{StaticResource OnChecking}" x:Name="OnChecking_BeginStoryboard"/>
                                </Trigger.EnterActions>
                                <!-- Change Orange or Blue color here -->
                                <Setter TargetName="BackgroundBorder" Property="Background" Value="{StaticResource CheckedRed}"/>
                                <Setter TargetName="BackgroundBorder" Property="BorderBrush" Value="{StaticResource CheckedRedBorder}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <!-- ToDo: Add Style for Isenabled == False -->
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ToggleSwitchOnOff_blue" TargetType="CheckBox">
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
            <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type CheckBox}">
                        <ControlTemplate.Resources>
                            <Storyboard x:Key="OnChecking">
                                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="slider" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)">
                                    <SplineDoubleKeyFrame KeyTime="00:00:00.0500000" Value="{StaticResource ToggleSwitchCarageWidth}"/>
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                            <Storyboard x:Key="OnUnchecking">
                                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="slider" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)">
                                    <SplineDoubleKeyFrame KeyTime="00:00:00.0500000" Value="0"/>
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                        </ControlTemplate.Resources>
                        <DockPanel x:Name="dockPanel" Width="{StaticResource ToggleSwitchWidth}">
                            <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" ContentTemplate="{TemplateBinding ContentTemplate}" RecognizesAccessKey="True" VerticalAlignment="Center"/>
                            <Grid>
                                <Border x:Name="BackgroundBorder" Background="{StaticResource CheckedRed}" BorderBrush="{StaticResource CheckedRedBorder}" BorderThickness="{StaticResource ToggleSwitchBorderThickness}" CornerRadius="{StaticResource ToggleSwitchCornerRadius}" Height="{StaticResource ToggleSwitchHeight}" Width="{StaticResource ToggleSwitchWidth}">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition/>
                                            <ColumnDefinition/>
                                        </Grid.ColumnDefinitions>
                                        <Ellipse x:Name="Off" Width="10" Height="10" Stroke="white" StrokeThickness="1.5" Grid.Column="1" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                        <Line x:Name="On" X1="0" Y1="0" X2="0" Y2="10" Stroke="white" StrokeThickness="2" Grid.Column="0" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                    </Grid>
                                </Border>
                                <Border HorizontalAlignment="Left" BorderBrush="{StaticResource RegularBorder}" x:Name="slider" Width="{StaticResource ToggleSwitchCarageWidth}" Height="{StaticResource ToggleSwitchHeight}" BorderThickness="{StaticResource ToggleSwitchBorderThickness}" CornerRadius="{StaticResource ToggleSwitchCornerRadius}" RenderTransformOrigin="0.5,0.5" Margin="0">
                                    <Border.RenderTransform>
                                        <TransformGroup>
                                            <ScaleTransform ScaleX="1" ScaleY="1"/>
                                            <SkewTransform AngleX="0" AngleY="0"/>
                                            <RotateTransform Angle="0"/>
                                            <TranslateTransform X="0" Y="0"/>
                                        </TransformGroup>
                                    </Border.RenderTransform>
                                    <Border Background="{StaticResource Carage}"/>
                                </Border>
                            </Grid>
                        </DockPanel>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="True">
                                <Trigger.ExitActions>
                                    <BeginStoryboard Storyboard="{StaticResource OnUnchecking}" x:Name="OnUnchecking_BeginStoryboard"/>
                                </Trigger.ExitActions>
                                <Trigger.EnterActions>
                                    <BeginStoryboard Storyboard="{StaticResource OnChecking}" x:Name="OnChecking_BeginStoryboard"/>
                                </Trigger.EnterActions>
                                <Setter TargetName="On" Property="Stroke" Value="White"/>
                                <Setter TargetName="Off" Property="Stroke" Value="White"/>
                                <!-- Change Orange or Blue color here -->
                                <Setter TargetName="BackgroundBorder" Property="Background" Value="{StaticResource CheckedGreen}"/>
                                <Setter TargetName="BackgroundBorder" Property="BorderBrush" Value="{StaticResource CheckedGreenBorder}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <!-- ToDo: Add Style for Isenabled == False -->
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="Labels" TargetType="Label">
            <Setter Property="Foreground"           Value="{StaticResource EasyGrey}"/>
            <Setter Property="Margin"               Value="2"/>
            <Setter Property="HorizontalAlignment"  Value="Center"/>
            <Setter Property="VerticalAlignment"    Value="Center"/>
        </Style>
        <Style x:Key="ToggleSwitch16_21_blue" TargetType="CheckBox">
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
            <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type CheckBox}">
                        <ControlTemplate.Resources>
                            <Storyboard x:Key="OnChecking">
                                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="slider" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)">
                                    <SplineDoubleKeyFrame KeyTime="00:00:00.0500000" Value="{StaticResource ToggleSwitchCarageWidth}"/>
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                            <Storyboard x:Key="OnUnchecking">
                                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="slider" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)">
                                    <EasingDoubleKeyFrame KeyTime="0:0:0.06" Value="0"/>
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                        </ControlTemplate.Resources>
                        <DockPanel x:Name="dockPanel" Width="{StaticResource ToggleSwitchWidth}">
                            <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" ContentTemplate="{TemplateBinding ContentTemplate}" RecognizesAccessKey="True" VerticalAlignment="Center"/>
                            <Grid>
                                <Border x:Name="BackgroundBorder" Background="{StaticResource CheckedBlue}" BorderBrush="{StaticResource CheckedBlueBorder}" BorderThickness="{StaticResource ToggleSwitchBorderThickness}" CornerRadius="{StaticResource ToggleSwitchCornerRadius}" Height="{StaticResource ToggleSwitchHeight}" Width="{StaticResource ToggleSwitchWidth}">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition/>
                                            <ColumnDefinition/>
                                        </Grid.ColumnDefinitions>
                                        <TextBlock Margin="0,0,0,0.4"   x:Name="Off" HorizontalAlignment="Center" Grid.Column="0" VerticalAlignment="Center" Text="21/9" FontSize="10" Foreground="White"/>
                                        <TextBlock Margin="0,0,0.8,0.5" x:Name="On"  HorizontalAlignment="Center" Grid.Column="1" VerticalAlignment="Center" Text="16/9" FontSize="10" Foreground="White"/>
                                    </Grid>
                                </Border>
                                <Border HorizontalAlignment="Left"  BorderBrush="#FF636363" x:Name="slider" Width="{StaticResource ToggleSwitchCarageWidth}" Height="{StaticResource ToggleSwitchHeight}" BorderThickness="{StaticResource ToggleSwitchBorderThickness}" CornerRadius="{StaticResource ToggleSwitchCornerRadius}" RenderTransformOrigin="0.5,0.5" Margin="0">
                                    <Border.RenderTransform>
                                        <TransformGroup>
                                            <ScaleTransform ScaleX="1" ScaleY="1"/>
                                            <SkewTransform AngleX="0" AngleY="0"/>
                                            <RotateTransform Angle="0"/>
                                            <TranslateTransform X="0" Y="0"/>
                                        </TransformGroup>
                                    </Border.RenderTransform>
                                    <Border Background="{StaticResource Carage}"/>
                                </Border>
                            </Grid>
                        </DockPanel>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="True">
                                <Trigger.ExitActions>
                                    <BeginStoryboard Storyboard="{StaticResource OnUnchecking}" x:Name="OnUnchecking_BeginStoryboard"/>
                                </Trigger.ExitActions>
                                <Trigger.EnterActions>
                                    <BeginStoryboard Storyboard="{StaticResource OnChecking}" x:Name="OnChecking_BeginStoryboard"/>
                                </Trigger.EnterActions>
                                <!-- Change Orange or Blue color here -->
                                <Setter TargetName="BackgroundBorder" Property="Background" Value="{StaticResource CheckedBlue}"/>
                                <Setter TargetName="BackgroundBorder" Property="BorderBrush" Value="{StaticResource CheckedBlueBorder}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <!-- ToDo: Add Style for Isenabled == False -->
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="ToggleSwitchCCC" TargetType="CheckBox">
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
            <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type CheckBox}">
                        <ControlTemplate.Resources>
                            <Storyboard x:Key="OnChecking">
                                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="slider" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)">
                                    <SplineDoubleKeyFrame KeyTime="00:00:00.0500000" Value="{StaticResource ToggleSwitchCarageWidth}"/>
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                            <Storyboard x:Key="OnUnchecking">
                                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="slider" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)">
                                    <EasingDoubleKeyFrame KeyTime="0:0:0.06" Value="0"/>
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                        </ControlTemplate.Resources>
                        <DockPanel x:Name="dockPanel" Width="{StaticResource ToggleSwitchWidth}">
                            <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" ContentTemplate="{TemplateBinding ContentTemplate}" RecognizesAccessKey="True" VerticalAlignment="Center"/>
                            <Grid>
                                <Border x:Name="BackgroundBorder" Background="{StaticResource CheckedBlue}" BorderBrush="{StaticResource CheckedBlueBorder}" BorderThickness="{StaticResource ToggleSwitchBorderThickness}" CornerRadius="{StaticResource ToggleSwitchCornerRadius}" Height="{StaticResource ToggleSwitchHeight}" Width="{StaticResource ToggleSwitchWidth}">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition/>
                                            <ColumnDefinition/>
                                        </Grid.ColumnDefinitions>
                                        <TextBlock Margin="0,0,0,0.4"   x:Name="Off" HorizontalAlignment="Center" Grid.Column="0" VerticalAlignment="Center" Text="↻"  FontSize="18" Foreground="White" Padding="0,0,0,4"/>
                                        <TextBlock Margin="0,0,0.8,0.5" x:Name="On"  HorizontalAlignment="Center" Grid.Column="1" VerticalAlignment="Center" Text="↺"  FontSize="18" Foreground="White" Padding="1.5,0,0,4"/>
                                    </Grid>
                                </Border>
                                <Border HorizontalAlignment="Left"  BorderBrush="#FF636363" x:Name="slider" Width="{StaticResource ToggleSwitchCarageWidth}" Height="{StaticResource ToggleSwitchHeight}" BorderThickness="{StaticResource ToggleSwitchBorderThickness}" CornerRadius="{StaticResource ToggleSwitchCornerRadius}" RenderTransformOrigin="0.5,0.5" Margin="0">
                                    <Border.RenderTransform>
                                        <TransformGroup>
                                            <ScaleTransform ScaleX="1" ScaleY="1"/>
                                            <SkewTransform AngleX="0" AngleY="0"/>
                                            <RotateTransform Angle="0"/>
                                            <TranslateTransform X="0" Y="0"/>
                                        </TransformGroup>
                                    </Border.RenderTransform>
                                    <Border Background="{StaticResource Carage}"/>
                                </Border>
                            </Grid>
                        </DockPanel>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="True">
                                <Trigger.ExitActions>
                                    <BeginStoryboard Storyboard="{StaticResource OnUnchecking}" x:Name="OnUnchecking_BeginStoryboard"/>
                                </Trigger.ExitActions>
                                <Trigger.EnterActions>
                                    <BeginStoryboard Storyboard="{StaticResource OnChecking}" x:Name="OnChecking_BeginStoryboard"/>
                                </Trigger.EnterActions>
                                <!-- Change Orange or Blue color here -->
                                <Setter TargetName="BackgroundBorder" Property="Background" Value="{StaticResource CheckedBlue}"/>
                                <Setter TargetName="BackgroundBorder" Property="BorderBrush" Value="{StaticResource CheckedBlueBorder}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <!-- ToDo: Add Style for Isenabled == False -->
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style TargetType="{x:Type TabItem}">
            <Setter Property="Visibility" Value="Visible"/>
            <Setter Property="Foreground" Value="{StaticResource EasyGrey}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TabItem}">
                        <Grid>
                            <Border Name="Border" Background="#33000000" BorderBrush="#FFD4B300" Margin="0,0,3.2,0" Padding="2,0,2,2" BorderThickness="2" CornerRadius="1,1,1,1" Grid.Column="0">
                                <ContentPresenter x:Name="ContentSite" VerticalAlignment="Center" HorizontalAlignment="Center" ContentSource="Header" Margin="2"/>
                            </Border>
                            <Border HorizontalAlignment="Stretch" Grid.Column="1"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsSelected" Value="True">
                                <!--<Setter Property="Foreground" Value="Gold"/>-->
                                <Setter Property="FontSize" Value="13"/>
                                <Setter Property="CornerRadius" Value="1,1,1,1" TargetName="Border"/>
                            </Trigger>
                            <Trigger Property="IsSelected" Value="False">
                                <Setter TargetName="Border" Property="BorderBrush" Value="#8EFFFFFF"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style TargetType="{x:Type TabControl}">
            <Setter Property="OverridesDefaultStyle" Value="True"/>
            <Setter Property="SnapsToDevicePixels" Value="True"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TabControl}">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <TabPanel x:Name="HeaderPanel" Grid.Row="0" Panel.ZIndex="1" Margin="0,0,4,3" IsItemsHost="True" Height="25">
                            </TabPanel>
                            <Border x:Name="Border" Grid.Row="1" BorderThickness="2" CornerRadius="1,1,1,1" BorderBrush="#8EFFFFFF" Background="Transparent">
                                <Grid>
                                    <Border CornerRadius="2" Margin="3,3,0,0">
                                        <ContentPresenter x:Name="PART_SelectedContentHost" Margin="1" ContentSource="SelectedContent"/>
                                    </Border>
                                </Grid>
                            </Border>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Window.Resources>
    <UserControl Background="#F6101010" Padding="5">
        <Viewbox StretchDirection="Both" Stretch="Uniform">
            <StackPanel  HorizontalAlignment="Stretch">
                <StackPanel Margin="5,6,7,0">
                    <Viewbox Margin="0,0,0,7" StretchDirection="Both" Stretch="Uniform">
                        <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                            <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" VerticalAlignment="Center"  Margin="2">
                                <StackPanel  HorizontalAlignment="Center" VerticalAlignment="Center"  Margin="0,5,15,5" Visibility="{Binding SynLight.Screen2Visible, Converter={StaticResource b2v}, UpdateSourceTrigger=PropertyChanged}">
                                    <RadioButton Margin="2" GroupName ="screen0" VerticalAlignment="Top" Content="{DynamicResource screenFull}" Foreground="{StaticResource EasyGrey}" IsChecked="{Binding SynLight.ScreenFull}"/>
                                    <RadioButton Margin="2" GroupName ="screen1" VerticalAlignment="Top" Content="{DynamicResource screen1}" Foreground="{StaticResource EasyGrey}" IsChecked="{Binding SynLight.Screen1}"/>
                                    <RadioButton Margin="2" GroupName ="screen2" VerticalAlignment="Top" Content="{DynamicResource screen2}" Foreground="{StaticResource EasyGrey}" IsChecked="{Binding SynLight.Screen2}"/>
                                    <RadioButton Margin="2" GroupName ="screen3" VerticalAlignment="Top" Content="{DynamicResource screen3}" Foreground="{StaticResource EasyGrey}" IsChecked="{Binding SynLight.Screen3}" Visibility="{Binding SynLight.Screen3Visible, Converter={StaticResource b2v}, UpdateSourceTrigger=PropertyChanged}"/>
                                </StackPanel>
                                <StackPanel  Margin="0,5,0,0" VerticalAlignment="Center">
                                    <Label Style="{StaticResource Labels}" Content="{DynamicResource x}"/>
                                    <Label Style="{StaticResource Labels}" Content="{DynamicResource y}"/>
                                </StackPanel>
                                <StackPanel  Margin="0,5,0,0" VerticalAlignment="Center">
                                    <TextBox Template="{StaticResource TextBoxBaseControlTemplate}" Margin="2" Padding="3" VerticalAlignment="Center" TextAlignment="Center" Height="25" TextWrapping="Wrap" Width="45" Text="{Binding SynLight.Width,     UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="PositiveNumberValidationTextBox"/>
                                    <TextBox Template="{StaticResource TextBoxBaseControlTemplate}" Margin="2" Padding="3" VerticalAlignment="Center" TextAlignment="Center" Height="25" TextWrapping="Wrap" Width="45" Text="{Binding SynLight.Height,    UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="PositiveNumberValidationTextBox"/>
                                </StackPanel>
                                <StackPanel  Margin="10,5,0,0" VerticalAlignment="Center">
                                    <Label Style="{StaticResource Labels}" HorizontalAlignment="Right" Content="{DynamicResource corners}"/>
                                    <Label Style="{StaticResource Labels}" HorizontalAlignment="Right" Content="{DynamicResource shifting}"/>
                                </StackPanel>
                                <StackPanel Margin="0,5,0,0" VerticalAlignment="Center">
                                    <TextBox Template="{StaticResource TextBoxBaseControlTemplate}" Margin="2" Padding="3" VerticalAlignment="Center" TextAlignment="Center" Height="25" TextWrapping="Wrap" Width="45" Text="{Binding SynLight.Corner,      UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="PositiveNumberValidationTextBox"/>
                                    <TextBox Template="{StaticResource TextBoxBaseControlTemplate}" Margin="2" Padding="3" VerticalAlignment="Center" TextAlignment="Center" Height="25" TextWrapping="Wrap" Width="45" Text="{Binding SynLight.Shifting,    UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="PositiveNumberValidationTextBox"/>
                                </StackPanel>
                            </StackPanel>
                        </StackPanel>
                    </Viewbox>
                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                        <StackPanel Orientation="Horizontal" VerticalAlignment="Center" Margin="0,5,10,0">
                            <Label Style="{StaticResource Labels}" Margin="0,0,3,0" Content="{DynamicResource ratio}"/>
                            <CheckBox Style="{StaticResource ToggleSwitch16_21_blue}" IsChecked="{Binding SynLight.Ratio, Converter={StaticResource Not}}"/>
                        </StackPanel>
                        <StackPanel Orientation="Horizontal" VerticalAlignment="Center" Margin="5,5,0,0">
                            <Label Style="{StaticResource Labels}" Margin="0,0,2,0" Content="Contrast :"/>
                            <StackPanel >
                                <Slider Margin="5" Value="{Binding SynLight.Contrast}" Width="60" Maximum="100"/>
                            </StackPanel>
                        </StackPanel>
                    </StackPanel>
                </StackPanel>
                <Separator Height="5" Margin="10" Foreground="#BBDBDBDB"/>
                <Viewbox>
                    <StackPanel Margin="10,0,10,0" Orientation="Horizontal" VerticalAlignment="Center">
                        <StackPanel>
                            <Label Style="{StaticResource Labels}" Content="Ambiant" HorizontalAlignment="Right"/>
                            <StackPanel Margin="0,-9,0,0" Orientation="Horizontal" HorizontalAlignment="Center">
                                <Label Style="{StaticResource Labels}" Margin="3,0,0,0" Content="{Binding SynLight.Mix, Converter={StaticResource purcentInv}}" HorizontalAlignment="Right"/>
                                <Label Style="{StaticResource Labels}" Margin="-7,0,0,0" Content="%" HorizontalAlignment="Left"/>
                            </StackPanel>
                        </StackPanel>
                        <Slider Width="100" Margin="3,6,3,5" Maximum="100" Minimum="0" VerticalAlignment="Center" Value="{Binding SynLight.Mix}"/>
                        <Label Style="{StaticResource Labels}" Margin="-9,0,-4,0" Content=""/>
                        <StackPanel>
                            <Label Style="{StaticResource Labels}" Content="{DynamicResource static}" HorizontalAlignment="Right"/>
                            <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" Margin="0,-9,0,0">
                                <Label Style="{StaticResource Labels}" Margin="3,0,0,0" Content="{Binding SynLight.Mix}" HorizontalAlignment="Right"/>
                                <Label Style="{StaticResource Labels}" Margin="-7,0,0,0" Content="%" HorizontalAlignment="Left"/>
                            </StackPanel>
                        </StackPanel>
                        <xctk:DropDownButton x:Name="_dropDownButton" Padding="0,0,0,1" Background="LightGray" Foreground="Black" Grid.Row="1" Margin="10" Width="120" Height="22" HorizontalAlignment="Left" Content="{DynamicResource color}" VerticalAlignment="Center">
                            <xctk:DropDownButton.DropDownContent>
                                <StackPanel>
                                    <xctk:ColorCanvas UsingAlphaChannel="False" R="{Binding SynLight.Red,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" G="{Binding SynLight.Green,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" B="{Binding SynLight.Blue,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                                    <Button Margin="10" Click="Button_Click">OK</Button>
                                </StackPanel>
                            </xctk:DropDownButton.DropDownContent>
                        </xctk:DropDownButton>
                    </StackPanel>
                </Viewbox>
                <Separator Height="5" Margin="10" Foreground="#BBDBDBDB"/>
                <StackPanel Margin="0,1,0,0" Orientation="Horizontal" HorizontalAlignment="Center">
                    <StackPanel Orientation="Horizontal">
                        <StackPanel >
                            <Label Style="{StaticResource Labels}" Content="{DynamicResource first}"/>
                            <Label Style="{StaticResource Labels}" HorizontalAlignment="Right" Margin="0,7,2,0" Content="↕" FontSize="18"/>
                        </StackPanel>
                        <StackPanel >
                            <StackPanel Orientation="Horizontal" VerticalAlignment="Center">
                                <StackPanel  VerticalAlignment="Center">
                                    <RadioButton Name="TL" GroupName="position" Margin="2" IsChecked="{Binding SynLight.TopLeft}"/>
                                    <RadioButton Name="BL" GroupName="position" Margin="2" IsChecked="{Binding SynLight.BotLeft}"/>
                                </StackPanel>
                                <StackPanel  VerticalAlignment="Center">
                                    <RadioButton Name="TR" GroupName="position" Margin="2" IsChecked="{Binding SynLight.TopRight}"/>
                                    <RadioButton Name="BR" GroupName="position" Margin="2" IsChecked="{Binding SynLight.BotRight}"/>
                                </StackPanel>
                            </StackPanel>
                            <TextBox Template="{StaticResource TextBoxBaseControlTemplate}" Margin="0,10,0,0" Padding="2" VerticalAlignment="Center" TextAlignment="Center" Height="22" TextWrapping="Wrap" Width="40" Text="{Binding SynLight.UpDown,UpdateSourceTrigger=PropertyChanged}" PreviewTextInput="NumberValidationTextBox"/>
                        </StackPanel>
                    </StackPanel>
                    <Label Style="{StaticResource Labels}" Margin="20,0,0,0" Content="{DynamicResource direction}"/>
                    <CheckBox Style="{StaticResource ToggleSwitchCCC}" IsChecked="{Binding SynLight.Clockwise}"/>
                </StackPanel>
                <Separator Height="5" Margin="10" Foreground="#BBDBDBDB"/>
                <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                    <StackPanel Margin="5">
                        <Label Style="{StaticResource Labels}" HorizontalAlignment="Right" VerticalAlignment="Center" Content="{DynamicResource LPF}"/>
                        <Label Style="{StaticResource Labels}" HorizontalAlignment="Right" VerticalAlignment="Center" Content="F.lux :"/>
                    </StackPanel>
                    <StackPanel Margin="5">
                        <CheckBox Margin="5" IsChecked="{Binding SynLight.LPF}" Style="{StaticResource ToggleSwitchOnOff_blue}"/>
                        <CheckBox  Style="{StaticResource ToggleSwitchOnOff_blue}" Margin="5" IsChecked="{Binding SynLight.UsingFlux}"/>
                    </StackPanel>
                </StackPanel>
                <CheckBox Style="{StaticResource ToggleSwitchPlayPause}" Margin="0,10,0,6" IsChecked="{Binding SynLight.PlayPause}"/>
            </StackPanel>
        </Viewbox>
    </UserControl>
</Window>
